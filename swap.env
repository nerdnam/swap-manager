# 일반적으로 SWAP_SIZE와 동일하게 설정하여 전체 스왑 공간을 사용하도록 허용
# 화면 지우기 기능 활성화 여부 (컨테이너 환경에서는 제한될 수 있습니다)
# 스왑 파일 크기 (예: 512G, 8G, 1024M, 500K)
# 스왑 파일 이름 (SWAP_SIZE 변수를 사용하여 동적으로 설정 가능)
# vm.swappiness 설정 값 (시스템 기본값은 60, 최대 200)
# 리소스 관리를 적용할 대상 컨테이너의 이름 (Docker SDK 사용 시 필요 - 현재는 재시작 기능용)
# PID를 찾을 대상 프로세스의 전체 명령 라인 (pgrep -f 사용)
# 사용할 Cgroup의 이름 (컨테이너 내부에 생성될 경로의 마지막 부분)
# Cgroup을 통해 설정할 메모리 제한 (컨테이너의 RAM 사용량 제한)
# Cgroup을 통해 설정할 스왑 제한 (컨테이너의 스왑 사용량 제한)
# 대상 컨테이너의 PID를 찾기 위한 최대 재시도 횟수
# PID를 찾지 못했을 때 컨테이너 재시작 후 대기하는 타임아웃 (초)
# 리소스 관리 루프가 다음 작업을 수행하기까지 대기하는 주기 (초)
# 애플리케이션 로그 파일이 저장될 경로
# Flask 웹 서버가 실행될 포트
# 스왑 파일이 생성될 호스트 볼륨 마운트 경로 (컨테이너 내부 경로)
# 디버그 모드 활성화 여부 (로그 상세도 증가 등)

CLEAR_SCREEN=True
SWAP_SIZE=64G                                               # swap 메모리의 용량 설정
SWAP_FILE=swapfile_${SWAP_SIZE}.gb
SWAPINESS=200
CONTAINER_NAME=ix-ollama-ollama-1                            # CLI 모드에서 docker ps 명령어로 CONTAINER NAME 확인
TARGET_PROCESS_NAME=/bin/ollama serve                        # CLI 모드에서 docker ps 명령어로 COMMAND 확인
CGROUP_NAME=my_large_process
MEMORY_LIMIT=4G
SWAP_LIMIT=${SWAP_SIZE}
MAX_PID_RETRIES=5
CONTAINER_START_TIMEOUT=30
CONTAINER_CHECK_INTERVAL=600
LOG_FILE=/var/log/my_app/swap_manager.log                    # log 파일 위치
WEB_UI_PORT=5000                                             # docker container 내부 포트
SWAP_WORK_DIR=/mnt/SwapWork                                  # Swapfile 생성 위치
DEBUG=true                                                   # 디버그 모드 true, false